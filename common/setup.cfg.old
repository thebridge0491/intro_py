[metadata]
name = intro_py.util
version = 0.1.0
description = Utilities sub-package for Python Intro examples project.
long_description = file: README.rst, HISTORY.rst
long_description_content_type = text/x-rst
keywords = demo, development, util
url = https://bitbucket.org/thebridge0491/intro_py
download_url = https://bitbucket.org/thebridge0491/intro_py/archive/master.zip
#project_urls =
#    Bug Tracker = https://bitbucket.org/thebridge0491/intro_py/issues
author = thebridge0491
author_email = thebridge0491-codelab@yahoo.com
#maintainer = thebridge0491
#maintainer_email = thebridge0491-codelab@yahoo.com
license = Apache-2.0
license_files = LICENSE
##note: license classifiers
##  "Apache-2.0": "License :: OSI Approved :: Apache Software License"
##  "MIT": "License :: OSI Approved :: MIT License"
##	"BSD-3-Clause": "License :: OSI Approved :: BSD License"
##	"GPL-3.0+": "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)"
##	"ISC": "License :: OSI Approved :: ISC License (ISCL)"
##	"Unlicense": "License :: Public Domain"
classifiers = 
	Natural Language :: English
	Development Status :: 3 - Alpha
	Intended Audience :: Developers
	License :: OSI Approved :: Apache Software License
	Programming Language :: Python
	Programming Language :: Python :: 3
	Programming Language :: Python :: Implementation :: Jython
	Topic :: Software Development
platforms = any

[options]
zip_safe = True
python_requires = >=3.8
install_requires = 
	wheel==0.34.2
	importlib-metadata==1.7.0; python_version < "3.8"
# note: MANIFEST.in w/ include_package_data=True
include_package_data = True
packages = find:
#packages = find_namespace:
#package_dir = =.

#[options.packages.find]
#exclude = build*, dist*, docs*, tests*, *.tests, tools*

[options.extras_require]
setup = coverage[toml]==5.1; pylint==2.5.3; pycodestyle==2.7.0; pydocstyle==5.0.2; Sphinx==3.1.1
test = pytest==5.4.3; pytest-timeout==1.4.2; nose2==0.10.0; hypothesis==5.19.0
dev = check-manifest==0.42

#[options.entry_points]
#console_scripts =
#	intro_py = intro_py.util.cli:main

[aliases]
## Define setup.py command aliases here
#test = pytest

[sdist]
formats = gztar zip

[bdist_wheel]
universal = 1

#[build_sphinx]
#build_dir = build/sphinx

[build_ext]
build_lib = .

[develop]
build_directory = build
install_dir = build/Lib
user = True
no_deps = True


## .bumpversion.cfg in cur dir
## or [bumpversion[:___]] section in setup.cfg
[bumpversion]
current_version = 0.1.0
commit = True
tag = True

[bumpversion:file:setup.cfg]
#search = __version__ = '{current_version}'
#replace = __version__ = '{new_version}'
search = version = {current_version}
replace = version = {new_version}


## .flake8 in cur dir or ~/[.config/]flake8
## or [flake8] section in setup.cfg
[flake8]
max_line_length = 140
exclude = .hg,.git,build,_build,dist,docs,*/tests/*
ignore = E401,E251,W391,E302
statistics = True
max_complexity = 5


## .pycodestyle in cur dir or ~/.config/pycodestyle
## or [pycodestyle] section in setup.cfg
[pycodestyle]
max_line_length = 140
exclude = .hg,.git,build,_build,dist,docs,*/tests/*
ignore = E401,E251,W391,E302
statistics = True


## .pydocstyle in cur or any parent dir
## or [pydocstyle] section in setup.cfg
[pydocstyle]
inherit = False
#match = .*\.py
match = .*/(?!.*_test)(?!test_).*\.py
ignore = D300,D103,D102,D101,D105


## pytest.ini in cur dir or any parent dir
## or [tool:pytest] section in setup.cfg; [tool.pytest] in pyproject.toml
[tool:pytest]
norecursedirs = .hg .git .tox .env dist build _build docs
collect_ignore = ['setup.py', 'tasks.py']
python_files = test_*.py *_test.py tests.py
addopts = -rxEfsw --strict --doctest-modules --doctest-glob=\*.rst --tb=short
#testspaths = tests


## http://coverage.readthedocs.io/en/latest/config.html
## .coveragerc in cur dir
## or [coverage:___] section in setup.cfg; [tool.coverage.*] in pyproject.toml
[coverage:run]
#data_file = build/.coverage
source = .
omit = setup.py,tasks.py
branch = True
parallel = True

[coverage:report]
show_missing = True
precision = 2
#omit = *migrations*

[coverage:html]
#directory = build/cov
title = Coverage report

[coverage:xml]
#output = build/coverage.xml


## pylint --disable 'wildcard-import,unused-import,unused-wildcard-import,multiple-imports,trailing-whitespace,bad-whitespace,redefined-builtin,wrong-spelling-in-comment,pointless-statement,unused-argument,missing-docstring' --msg-template '{C}: {line}, {column}: {msg} {msg_id}({symbol})' --reports yes --generate-rcfile | sed 's/^\[/[pylint:/' >> .pylintrc
## [.]pylintrc in cur dir or ~/[.config/]pylintrc
## or pylint --rcfile setup.cfg (with [pylint:___] section in setup.cfg)
## or [tool.pylint:???] in pyproject.toml
[pylint:MESSAGES CONTROL]
disable = wildcard-import,unused-import,unused-wildcard-import,multiple-imports,trailing-whitespace,bad-whitespace,redefined-builtin,wrong-spelling-in-comment,pointless-statement,unused-argument,missing-docstring

[pylint:REPORTS]
reports = yes
msg-template = {C}: {line}, {column}: {msg} {msg_id}({symbol})
