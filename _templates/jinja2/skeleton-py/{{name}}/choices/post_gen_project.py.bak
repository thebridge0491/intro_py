#!/usr/bin/env python
import os, glob

def matches_filepatterns(filepats, paths):
	import fnmatch
	matches_pats = [os.path.join(root, file1) for path in paths
		for root, dirs, files in os.walk(path) for filepat in filepats
		for file1 in fnmatch.filter(dirs + files, filepat)]
	return matches_pats
	
def remove_pathlist(pathlist):
	import shutil
	for path in pathlist:
		if os.path.exists(path) and os.path.isdir(path):
			shutil.rmtree(path)
		elif os.path.exists(path):
			os.remove(path)
	
def copy_pathlist(pathlist, dst):
	import shutil
	for path in pathlist:
		if os.path.exists(path) and os.path.isdir(path):
			shutil.copytree(path, os.path.join(dst, os.path.basename(path)))
		elif os.path.exists(path) and not os.path.isdir(path):
			shutil.copy(path, dst)


if '__main__' == __name__:
	copy_pathlist(['choices'], 'build')
	remove_pathlist(['choices'])

	copy_pathlist(glob.glob('build/choices/readme/README{{readmeext}}'), 'README{{readmeext}}')
	copy_pathlist(glob.glob('build/choices/_parent_readme/README{{readmeext}}'), 'build/choices/_parent_init/README{{readmeext}}')

	if '{{license}}' in ['Apache-2.0', 'MIT', 'BSD-3-Clause', 
			'GPL-3.0+', 'ISC', 'Unlicense']:
		copy_pathlist(glob.glob('build/choices/license/LICENSE_{{license}}'), 'LICENSE')

	if '{{buildtool}}' in ['setuptools', 'make', 'invoke']:
		copy_pathlist(glob.glob('build/choices/build_tool/{{buildtool}}/*'), '.')
	else: # default: setuptools
		copy_pathlist(glob.glob('build/choices/build_tool/setuptools/*'), '.')

	if '{{testfrwk}}' in ['unittest', 'pytest', 'nose2']:
		copy_pathlist(glob.glob('build/choices/testfrwk/{{testfrwk}}/*'),
			'{{nesteddirs}}')
	else: # default: unittest
		copy_pathlist(glob.glob('build/choices/testfrwk/unittest/*'), 
			'{{nesteddirs}}')
	
	if 'yes' != '{{executable}}':
		remove_pathlist(["{{nesteddirs}}/__main__.py",
			"{{nesteddirs}}/cli.py"])

	if '{{ ffilib }}' in ['ctypes', 'cffi', 'swig', 'jna']:
		copy_pathlist(glob.glob('build/choices/ffi_lib/{{ffilib}}/*'),
			'{{nesteddirs}}')
	
	#quickstart.main("-- -p '{{parentcap}}{{joiner}}{{projectcap}}' -a '{{author}}' -v {{version}} --no-batchfile --no-makefile --ext-autodoc --ext-viewcode -q docs".split())
	#apidoc.main('-- -o docs/ {{parent.replace(".", "/")}}'.split())
	
	if os.path.exists('../_templates') and os.path.isdir('../_templates'):
		skel_pardir = os.path.dirname('{{_template}}')
		remove_pathlist([os.path.join('../_templates/jinja2/',
			os.path.basename('{{_template}}'))])
		copy_pathlist(glob.glob('{0}/render_jinja2.*'.format(skel_pardir)
			)+['{{_template}}'], '../_templates/jinja2/')
