# -*- coding: utf-8 -*-
'''FFI builder module for Classic.

'''

from __future__ import (absolute_import, division, print_function,
    unicode_literals)

import os, cffi
#from builtins import (ascii, filter, hex, map, oct, zip)

__all__ = []

ffibuilder = cffi.FFI()
PREFIX = os.environ.get('PREFIX', '/usr/local')

ffibuilder.set_source(module_name = '{{parent}}{{^parent}}intro_py{{/parent}}{{separator}}{{^separator}}-{{/separator}}{{project}}{{^project}}util{{/project}}._classic',
    source = ''' // passed to the real C compiler
        #include <stdlib.h>
        #include "intro_c/classic.h"
    ''',
    include_dirs = ['.', '{{nesteddirs}}{{^nesteddirs}}intro_py/util{{/nesteddirs}}', 
		'{}/include'.format(PREFIX)],
    library_dirs = os.environ.get('LD_LIBRARY_PATH', 'build/lib').split(':'),
    libraries = ['intro_c-practice'],
    runtime_library_dirs = ['$ORIGIN/', '{}/lib'.format(PREFIX)],
    extra_compile_args = os.environ.get('CPPFLAGS', '-Ibuild/include').split(' '),
    extra_link_args = os.environ.get('LDFLAGS', '-Lbuild/lib').split(' '))

ffibuilder.cdef(csource = '''     // some declarations from the man page
    unsigned long fact_i(const unsigned int n);
    unsigned long fact_lp(const unsigned int n);

    float expt_i(const float b, const float n);
    float expt_lp(const float b, const float n);
''')

if '__main__' == __name__:
    ffibuilder.compile(tmpdir = '.', verbose=True)
