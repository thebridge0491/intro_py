.POSIX:
.SUFFIXES:
PREFIX = /usr/local

DEBUG = 0

.DEFAULT_GOAL := help

# [python[2|3]|jython]
PYTHON = python

pkg = {{project}}{{^project}}util{{/project}}
parent = {{parent}}{{^parent}}intro_py{{/parent}}
proj = $(parent).$(pkg)
namespace_path = $(shell echo $(proj) | sed 'y|.|/|')
#version = $(shell sed -n 's|^Version: \(.*\)|\1|p' $(proj).*-info/* | uniq)
version = $(shell $(PYTHON) setup.py --version)
ver_major = $(shell echo $(version) | cut -d'.' -f1)

FMTS ?= gztar,zip

define PRINT_HELP_PYSCRIPT
import re, sys

for line in sys.stdin:
	match = re.match(r'^([^:]*):.*?## (.*)$$', line)
	if match:
		target, help = match.groups()
		print("%-20s ## %s" % (target, help))
endef
export PRINT_HELP_PYSCRIPT

.PHONY: help build clean test develop install dist build_sphinx
help: ## help info: make [DEBUG=1] [PYTHON=python] [target]
	-@for fileX in $(MAKEFILE_LIST) ; do \
		$(PYTHON) -c "$$PRINT_HELP_PYSCRIPT" < $$fileX ; done
build: ## build package [DEBUG=1] [ARGS=""]
	$(PYTHON) setup.py $@ $(ARGS)
clean: ## clean build artifacts [ARGS=""]
	$(PYTHON) setup.py $@ $(ARGS)
test: ## run tests [DEBUG=1] [TOPTS=""]
	$(PYTHON) setup.py $@ $(TOPTS)
develop: ## to user's Python site-packages, python setup.py develop [ARGS=""]
	$(PYTHON) setup.py $@ $(ARGS) ; $(PYTHON) -m pip show $(proj)
install: ## to Python's site-packages, python setup.py install [ARGS=""]
	$(PYTHON) setup.py $@ $(ARGS) ; $(PYTHON) -m pip show $(proj)

dist: ## create source ([FMTS=gztar,zip]) and wheel distributions
	$(PYTHON) setup.py sdist --formats $(FMTS)
	$(PYTHON) setup.py bdist_wheel
	ls -l dist
build_sphinx: ## generate documentation [ARGS=""] (Sphinx HTML w/ API docs)
#	$(PYTHON) -m sphinx.quickstart -p '{{parentcap}}{{^parentcap}}Intro_py{{/parentcap}}{{joiner}}{{^joiner}}.{{/joiner}}{{projectcap}}{{^projectcap}}Util{{/projectcap}}' -a '{{author}}{{^author}}{{^repoacct}}imcomputer{{/repoacct}}{{/author}}' -v {{version}}{{^version}}0.1.0{{/version}} --no-batchfile --no-makefile --ext-autodoc --ext-viewcode -q docs
	$(PYTHON) -m sphinx.apidoc -f -o docs/ $(parent)
	$(PYTHON) setup.py $@ $(ARGS)


ZIPOPTS := $(ZIPOPTS) -9 -q --exclude @$PWD/exclude.lst

define BROWSER_PYSCRIPT
import os, webbrowser, sys

try:
	from urllib import pathname2url
except:
	from urllib.request import pathname2url

webbrowser.open("file://" + pathname2url(os.path.abspath(sys.argv[1])))
endef
export BROWSER_PYSCRIPT

#BROWSER := $(PYTHON) -c "$$BROWSER_PYSCRIPT"
BROWSER := w3m -M

.PHONY: pychecker pylint flake8 pep8 pep257 report html xml bdist_jar copyreqs zipreqs twine tox servedocs
pychecker: ## check style [ARGS=""] with pychecker
	$(PYTHON) -m pychecker.checker $(ARGS) `find $(parent) -name '*.py' -a ! -name '__main__.py'`
pylint: ## check style [ARGS=""] with pylint
	$(PYTHON) -m pylint --rcfile setup.cfg $(ARGS) $(proj)
flake8 pep8 pep257: ## check style [ARGS=""] with [flake8 | pep8 | pep257]
	$(PYTHON) -m $@ $(ARGS) `find $(parent) -name '*.py'`
report html xml: ## report code coverage [ARGS=""]
	$(PYTHON) -m coverage combine ; $(PYTHON) -m coverage $@ $(ARGS)
	if [ "$@" = "html"] && [ -e "htmlcov/index.html" ] ; then \
		$(BROWSER) htmlcov/index.html ; fi

bdist_jar: ## create jar distribution
	-echo Class-Path: . > build/manifest.mf
	-jar -cfme dist/$(proj)-$(version).jar build/manifest.mf \
		org.python.util.JarRunner $(proj).* ;
	-zip $(ZIPOPTS) -r dist/$(proj)-$(version).jar .
build/pylib copyreqs: ## copy requirements to build/pylib
	-$(PYTHON) -m pip install -I -t build/pylib/site-packages -r requirements.txt
	-$(PYTHON) -m pip install -U -I --no-deps -t build/pylib -r requirements-internal.txt
	-find build/pylib -type d -name '*-info' -delete
zipreqs: build/pylib ## zip requirements to [wheel|jar] distribution
	-for archive in `ls $PWD/dist/$(proj)*.whl $PWD/dist/$(proj)*.jar` ; do \
		(cd build/pylib ; zip $(ZIPOPTS) -r $$archive * ; \
		zip $(ZIPOPTS) -d $$archive site-packages/copyreg\*) ; \
		(cd $(namespace_path)/tests ; zip $(ZIPOPTS) -r $$archive __main__.py) ; \
	done

twine: dist ## register|upload a release
	$(PYTHON) -m twine upload dist/*
tox: ## for every Python version, run tests [TOPTS="-h"]
	$(PYTHON) -m tox $(TOPTS)
servedocs: docs ## compile the docs watching for changes
	$(PYTHON) -m watchdog.watchmedo shell-command -p '*.rst' -c '$(PYTHON) setup.py build_sphinx' -R -D .
